{% extends 'base.html.twig' %}

{% block title %}{{ freezer.name ? freezer.name : 'freezer' | capitalize }}{% endblock %}

{% block page_title %}Freezer{% endblock %}

{% block page_content %}
    <div class="col-12-row">
        <h3 class="underlined">Let's see what's in {{ freezer.name ? freezer.name : 'this freezer' }}</h3>
        <div class="col-12 no-gutters row">
            <p class="row align-items-center">
                <svg id="i-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                    <path d="M16 14 L16 23 M16 8 L16 10" />
                    <circle cx="16" cy="16" r="14" />
                </svg>
                Click on an item to adjust quantity or remove it.
            </p>
            <div class="col-3 text-center">
                <a class="app-link freezer-item" id="myBtn" href="{{ path('freezer_item_add', {id: freezer.id}) }}">
                    <h5 class="row align-items-center justify-content-center">Add item</h5>
                    <svg id="i-plus" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="32" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                        <path d="M16 2 L16 30 M2 16 L30 16" />
                    </svg>
                </a>
            </div>
            {% for item in freezer.actualItems %}
                <div class="col-3 text-center">
                    <a class="app-link freezer-item" href="{{ path('freezer_item_update', { id: item.id }) }}">
                        <h5 class="row align-items-center justify-content-center {{ (item.hasExpired) ? 'text-color-secondary' }}">
                            {% if item.expiresSoon %}
                                <svg id="i-flag" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="#dd6e42" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5">
                                    <path d="M6 2 L6 30 M6 6 L26 6 20 12 26 18 6 18" />
                                </svg>
                            {% endif %}
                            {% if item.hasExpired %}
                                <svg id="i-ban" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="16" height="16" fill="none" stroke="#dd6e42" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <circle cx="16" cy="16" r="14" />
                                    <path d="M6 6 L26 26" />
                                </svg>
                            {% endif %}
                            {{ item.category.name }}
                        </h5>
                        <svg id="i-bag" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="24" height="24" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                            <path d="M5 9 L5 29 27 29 27 9 Z M10 9 C10 9 10 3 16 3 22 3 22 9 22 9" />
                        </svg>
                        <p class="text-small">{{ item.description }}</p>
                        <p class="text-smaller">{{ item.quantity ~ ' ' ~ item.unit }}</p>
                    </a>
                </div>
            {% endfor %}
        </div>
    </div>
    {#  modal for new item / edit item  #}
    <div  id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <p>Some text in the Modal..</p>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
{{ parent() }}
    <script>
        window.onload = function() {
            // Get modal, modal content and close button
            const modal = document.getElementById("myModal");
            const modalContent = modal.querySelector(".modal-content p");
            const closeModalSpan = modal.getElementsByClassName("close")[0];

            const items = document.getElementsByClassName("freezer-item");

            // Each item will open modal, with form in it
            for (item of items) {
                item.onclick = function(event) {
                    event.preventDefault();
                    modal.style.display = "block";
                    xhr.open('POST', this.href);
                    xhr.send();
                }
            }

            // When the user clicks on <span> (x), close the modal
            closeModalSpan.onclick = function() {
                modal.style.display = "none";
            };

            // When the user clicks anywhere outside of the modal, close it
            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            };

            // Set up our HTTP request
            const xhr = new XMLHttpRequest();

            // Setup our listener to process completed requests
            xhr.onload = function () {

                // Process our return data
                if (xhr.status >= 200 && xhr.status < 300) {
                    // What do when the request is successful
                    modalContent.innerHTML = xhr.response;

                    category = document.getElementById('freezer_item_category');
                    dateExpiryInput = document.getElementById('freezer_item_dateExpiry');

                    // Update automatically expiry date when changing item's category
                    category.onchange = function(event) {
                        defaultValidity = event.target.options[event.target.options.selectedIndex].dataset.defaultValidity;
                        
                        dateExpiry = new Date();
                        dateExpiry.setDate(dateExpiry.getDate() + parseInt(defaultValidity));
                        
                        dateExpiryFormatted = dateExpiry.getFullYear();
                        dateExpiryFormatted += '-' + ('0' + (dateExpiry.getMonth()+1)).slice(-2);
                        dateExpiryFormatted += '-' + ('0' + dateExpiry.getDate()).slice(-2);

                        dateExpiryInput.value = dateExpiryFormatted;
                    }
                } else {
                    // What do when the request fails
                    console.log('The request failed!');
                    console.log(xhr.status);
                    console.log(xhr.response);
                }

                // Code that should run regardless of the request status
                // console.log('This always runs...');
            };
        };
    </script>
{% endblock %}
